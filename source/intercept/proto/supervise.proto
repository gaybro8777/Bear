/*  Copyright (C) 2012-2020 by László Nagy
    This file is part of Bear.

    Bear is a tool to generate compilation database for clang tooling.

    Bear is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Bear is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package rpc;
option cc_enable_arenas = true;

// This represents a (remote) supervisor process to set up program execution.
//
// A supervisor process executes a single program in the hope that it can
// get information about the state of the child process. But to decide what
// is the right strategy to intercept the relevant events from the child
// process can be done upfront.
//
// This interface describes a remote service which can be queried for how to
// execute the child program. Can resolve the executable name (in case of
// wrapper session) or update the environment variables (for both kind of
// sessions).
service Supervisor {

    // Resolve the executable name for the child process.
    //
    // Used in a wrapper session, when the build systems executes our wrapper
    // instead of the real command. Then the wrapper calls the supervisor to
    // find out which program is the real one to execute.
    rpc ResolveProgram (ResolveRequest) returns (ResolveResponse) {
    }

    // Update the environments for the child process.
    //
    // This is used for both wrapper and library sessions. The environment
    // variables are influencing how the processes behaves and which ones
    // are executed. It also specify the event sink (the interceptor) location.
    rpc Update (Environment) returns (Environment) {
    }
}

message ResolveRequest {
    string path = 1;
}

message ResolveResponse {
    string path = 1;
}

message Environment {
    map<string, string> values = 1;
}
